// <auto-generated />
using System;
using Deevenue.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Deevenue.Infrastructure.Db.Migrations
{
    [DbContext(typeof(DeevenueContext))]
    partial class DeevenueContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Deevenue.Infrastructure.Db.JobResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("JobTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobResults");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.Medium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FileSize")
                        .HasColumnType("numeric");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<char>("Rating")
                        .HasColumnType("character(1)");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.MediumHash", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character(32)")
                        .IsFixedLength();

                    b.Property<Guid>("MediumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("MediumId");

                    b.ToTable("MediumHashes");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.MediumTag", b =>
                {
                    b.Property<Guid>("MediumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("MediumId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MediumTags");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.MediumTagAbsence", b =>
                {
                    b.Property<Guid>("MediumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("MediumId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MediumTagAbsences");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("Aliases")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValue(new string[0]);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Rating")
                        .HasColumnType("character(1)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.TagImplication", b =>
                {
                    b.Property<Guid>("ImpliedTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImplyingTagId")
                        .HasColumnType("uuid");

                    b.HasKey("ImpliedTagId", "ImplyingTagId");

                    b.HasIndex("ImplyingTagId");

                    b.ToTable("TagImplications");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.ThumbnailSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MediumId")
                        .HasColumnType("uuid");

                    b.Property<int>("ThumbnailCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediumId");

                    b.ToTable("ThumbnailSheets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.MediumHash", b =>
                {
                    b.HasOne("Deevenue.Infrastructure.Db.Medium", "Medium")
                        .WithMany("KnownHashes")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medium");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.MediumTag", b =>
                {
                    b.HasOne("Deevenue.Infrastructure.Db.Medium", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deevenue.Infrastructure.Db.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medium");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.MediumTagAbsence", b =>
                {
                    b.HasOne("Deevenue.Infrastructure.Db.Medium", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deevenue.Infrastructure.Db.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medium");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.TagImplication", b =>
                {
                    b.HasOne("Deevenue.Infrastructure.Db.Tag", "ImpliedTag")
                        .WithMany("IncomingImplications")
                        .HasForeignKey("ImpliedTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deevenue.Infrastructure.Db.Tag", "ImplyingTag")
                        .WithMany("OutgoingImplications")
                        .HasForeignKey("ImplyingTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImpliedTag");

                    b.Navigation("ImplyingTag");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.ThumbnailSheet", b =>
                {
                    b.HasOne("Deevenue.Infrastructure.Db.Medium", "Medium")
                        .WithMany("ThumbnailSheets")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medium");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.Medium", b =>
                {
                    b.Navigation("KnownHashes");

                    b.Navigation("ThumbnailSheets");
                });

            modelBuilder.Entity("Deevenue.Infrastructure.Db.Tag", b =>
                {
                    b.Navigation("IncomingImplications");

                    b.Navigation("OutgoingImplications");
                });
#pragma warning restore 612, 618
        }
    }
}
